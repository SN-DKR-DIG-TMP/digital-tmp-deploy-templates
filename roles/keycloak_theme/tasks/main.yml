- name: Définir le chemin du fichier de versions des thèmes
  set_fact:
    theme_versions_file: "/{{ project_name }}/.theme_versions"

- name: S'assurer que le fichier {{ theme_versions_file }} existe
  file:
    path: "{{ theme_versions_file }}"
    state: touch
    owner: root
    group: root
    mode: '0644'

- name: Initialiser la liste des thèmes à installer
  set_fact:
    themes_to_install: []

- name: Vérifier les versions et sélectionner les thèmes à installer
  include_tasks: check_theme_version.yml
  loop: "{{ keycloak_themes }}"
  loop_control:
    label: "{{ item.name }}"
  when: keycloak_themes is defined and keycloak_themes | length > 0

- name: Afficher les thèmes à installer
  debug:
    var: themes_to_install

- name: Installer les thèmes nécessaires
  block:

    - name: Pull des images des thèmes à installer
      community.docker.docker_image:
        name: "{{ item.image }}"
        source: pull
      loop: "{{ themes_to_install }}"

    - name: Créer le dossier du thème s’il n'existe pas
      file:
        path: "/{{ project_name }}/keycloak/themes"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Lancer conteneur temporaire pour chaque thème à installer
      docker_container:
        name: "theme-temp-{{ item.name }}"
        image: "{{ item.image }}"
        state: started
        command: sleep 300
      loop: "{{ themes_to_install }}"

    - name: Copier les sous-thèmes dans le répertoire partagé
      command: >
        docker cp theme-temp-{{ item.0.name }}:/opt/keycloak/themes/{{ item.1 }}
        /{{ project_name }}/keycloak/themes/
      loop: "{{ themes_to_install | subelements('themes') }}"

    - name: Supprimer les conteneurs temporaires
      docker_container:
        name: "theme-temp-{{ item.name }}"
        state: absent
        force_kill: true
      loop: "{{ themes_to_install }}"

    - name: Mettre à jour la version installée dans {{ theme_versions_file }}
      lineinfile:
        path: "{{ theme_versions_file }}"
        regexp: "^{{ item.name }} "
        line: "{{ item.name }} {{ item.image.split(':')[-1] }}"
        create: yes
      loop: "{{ themes_to_install }}"

- name: Initialiser la liste des services à redémarrer
  set_fact:
    keycloak_services_to_restart: []

- name: Extraire les services Keycloak à redémarrer (uniques) pour thèmes installés
  set_fact:
    keycloak_services_to_restart: "{{ themes_to_install | map(attribute='keycloak_service_name') | unique }}"
  when: themes_to_install | length > 0

- name: Extraire les modules Keycloak
  set_fact:
    keycloak_modules: "{{ keycloak_modules | default([]) + (modules | selectattr('name', 'search', item) | list) }}"
  loop: "{{ keycloak_services_to_restart }}"
  loop_control:
    label: "{{ item }}"
  when: keycloak_services_to_restart  | length > 0

- name: Appliquer les secrets keycloak
  set_fact:
    keycloak_modules: "{{ keycloak_modules | inject_secrets(secrets) }}"
  when: secrets is defined and secrets | length > 0 and keycloak_modules is defined and keycloak_modules | length > 0

- name: Generate docker-compose.yml from template keycloak
  template:
    src: templates/docker-compose.j2
    dest: /opt/docker-compose.yml
    owner: root
    group: root
    mode: '0644'
  when: keycloak_modules is defined and keycloak_modules | length > 0

- name: Afficher les services Keycloak redémarrés
  debug:
    var: keycloak_services_to_restart
  when: keycloak_services_to_restart is defined and keycloak_services_to_restart | length > 0

- name: Afficher les modules Keycloak
  debug:
    var: keycloak_modules
  when: keycloak_modules is defined