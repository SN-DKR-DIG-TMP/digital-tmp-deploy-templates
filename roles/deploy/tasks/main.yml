---
- name: Générer une liste de listes avec nom et ses clés
  debug:
    msg: >-
      {{
        secrets | map(
          lambda s: [s.name] + (s | dict2items | map(attribute='key') | reject('equalto', 'name') | list)
        ) | list
      }}

- name: Ensure Docker is installed
  apt:
    name:
      - docker.io
      - docker-compose
    state: present
    update_cache: yes

# Connexion au GitHub Container Registry
- name: Log in to GitHub Container Registry
  docker_login:
    registry_url: ghcr.io
    username: "{{ github_username }}"
    password: "{{ github_token }}"

- name: Create Docker networks
  docker_network:
    name: "{{ item }}"
    state: present
  loop: "{{ modules | map(attribute='networks') | flatten | unique }}"
  when: item is defined

- name: Appliquer les secrets
  set_fact:
    modules_to_deploy: "{{ modules_to_deploy | inject_secrets(secrets) }}"

- name: Generate docker-compose.yml from template
  template:
    src: templates/docker-compose.j2
    dest: /opt/docker-compose.yml
    owner: root
    group: root
    mode: '0644'

- name: Validate docker-compose.yml syntax
  command: docker-compose -f /opt/docker-compose.yml config
  register: compose_validation
  changed_when: false
  ignore_errors: true

- name: Show validation errors if any
  debug:
    msg: "{{ compose_validation.stderr }}"
  when: compose_validation.rc != 0

- name: Fail if docker-compose.yml is invalid
  fail:
    msg: "docker-compose.yml validation failed, see previous error."
  when: compose_validation.rc != 0

- name: Deploy or restart modules with Docker Compose
  community.docker.docker_compose:
    project_src: /opt
    pull: yes
    project_name: "{{ project_name }}"
    recreate: always
    scale: "{{ modules_to_deploy | items2dict(key_name='name', value_name='replicas') }}"
  when: compose_validation.rc == 0


