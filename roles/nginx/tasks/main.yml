---
- name: Install Nginx
  ansible.builtin.apt:
    name: nginx
    state: present
  when: modules_to_deploy | length > 0

- name: Lister les fichiers temporaires correspondant aux modules Ã  dÃ©ployer
  ansible.builtin.find:
    paths: "/etc/nginx/sites-available"
    patterns: "digital_tmp_{{ item.name }}_*"
    file_type: file
  register: files_to_delete
  loop: "{{ modules_to_deploy }}"
  loop_control:
    label: "{{ item.name }}"
  changed_when: false
  tags: nginx_cleanup
  when: modules_to_deploy | length > 0

- name: Suppression des fichiers dans sites-available
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ files_to_delete.results | map(attribute='files') | flatten }}"
  when: item.files | length > 0
  tags: nginx_cleanup

- name: Suppression des liens dans sites-enabled
  ansible.builtin.file:
    path: "/etc/nginx/sites-enabled/{{ item.path | basename }}"
    state: absent
  loop: "{{ files_to_delete.results | map(attribute='files') | flatten }}"
  when: item.files | length > 0
  tags: nginx_cleanup

- name: Generate Nginx configuration for each module debian
  template:
    src: templates/nginx.conf.j2
    dest: /etc/nginx/sites-available/digital_tmp_{{ item.name }}.conf
    owner: root
    group: root
    mode: '0644'
  loop: "{{ modules_to_deploy }}"
  when: modules_to_deploy | length > 0 and ansible_distribution | lower == "debian"
  no_log: true

- name: Generate Nginx configuration for each module ubuntu
  template:
    src: templates/nginx-v2.conf.j2
    dest: /etc/nginx/sites-available/digital_tmp_{{ item.name }}.conf
    owner: root
    group: root
    mode: '0644'
  loop: "{{ modules_to_deploy }}"
  when: modules_to_deploy | length > 0 and ansible_distribution | lower == "ubuntu"
  no_log: true


- name: Show module details being processed
  debug:
    msg: >-
      Module: {{ item.name }},
      External Port: {{ item.external_port }},
      Internal Port: {{ item.internal_port }},
      Replicas: {{ item.replicas }}
  loop: "{{ modules_to_deploy }}"

- name: Create symbolic link in sites-enabled
  file:
    src: /etc/nginx/sites-available/digital_tmp_{{ item.name }}.conf
    dest: /etc/nginx/sites-enabled/digital_tmp_{{ item.name }}.conf
    state: link
  notify: Reload nginx
  loop: "{{ modules_to_deploy }}"
  when: modules_to_deploy | length > 0


- name: Generate Certbot script
  template:
    src: templates/certbot.sh.j2
    dest: /tmp/certbot_{{ item.name }}.sh
    owner: root
    group: root
    mode: '0755'
  loop: "{{ modules_to_deploy }}"
  when: >
    item.ssl_enabled | default(false) and
    item.server_name is defined and item.server_name

- name: Run Certbot script
  shell: /tmp/certbot_{{ item.name }}.sh
  loop: "{{ modules_to_deploy }}"
  notify: Reload nginx
  when: >
    item.ssl_enabled | default(false) and
    item.server_name is defined and item.server_name




