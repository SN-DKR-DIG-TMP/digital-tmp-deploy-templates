
- name: Combine project and resource projects
  set_fact:
    modules: "{{ projects | map('combine_with_resource', resources) | list }}"

- name: Debug merged modules
  debug:
    var: modules
  when: debug_mode | bool

- name: Afficher les modules (nom et image) ensemble
  debug:
    msg: "{{ modules | map(attribute='name') | list | zip(modules | map(attribute='image') | list) | map('join', ' ➜ ') | list }}"

- name: Get current service versions in Swarm
  community.docker.docker_swarm_service_info:
    name: "{{ project_name }}_{{ item.name }}"
  register: all_services
  loop: "{{ modules }}"

- name: Afficher les services
  debug:
    var: all_services

- name: Filtrer les services du stack "{{ project_name }}"
  set_fact:
    stack_services: >-
      {{
        all_services.results
        | selectattr('service', 'defined')
        | selectattr('service', '!=', none)
        | selectattr('service.Spec.Name', 'search', '^' ~ project_name ~ '_')
        | map(attribute='service')
        | list
      }}

- name: Afficher les stack_services
  debug:
    var: stack_services

- name: Afficher les services avec leur image (nom ➜ image)
  debug:
    msg: "{{ item.Spec.Name }} ➜ {{ item.Spec.TaskTemplate.ContainerSpec.Image | default('(no image)') }}"
  loop: "{{ stack_services }}"

- name: Initialiser la liste des services/images
  set_fact:
    container_images_list: []

- name: Ajouter service ➜ image
  set_fact:
    container_images_list: "{{ container_images_list + [ {'name': item.Spec.Name, 'image': item.Spec.TaskTemplate.ContainerSpec.Image | default('(no image)') } ] }}"
  loop: "{{ stack_services }}"

- name: Afficher container_images_list (images utilisées par les services du stack)
  debug:
    msg: "{{ container_images_list }}"

- name: Afficher les modules à déployer (nouvelle image)
  debug:
    msg: |
      Modules à déployer (nouvelle image) :
      {% for mod in modules
         if mod.image not in container_images_list | map(attribute='image') | list %}
      - {{ mod.name }} => {{ mod.image }}
      {% endfor %}

- name: Afficher les noms des modules à redémarrer de force
  debug:
    msg: |
      Modules à redémarrer de force :
      {% for mod in modules | selectattr('force_restart', 'defined') | selectattr('force_restart', 'equalto', true) %}
      - {{ mod.name }}
      {% endfor %}


- name: Filtrer les modules à installer ou redémarrer (sans doublons)
  set_fact:
    modules_to_deploy: >-
      {{
        (
          modules 
          | rejectattr('image', 'in', container_images_list | map(attribute='image') | list)
          + 
          modules 
          | selectattr('force_restart', 'defined') 
          | selectattr('force_restart', 'equalto', true)
        ) 
        | unique(attribute='name') 
        | list
      }}


- name: Valider qu'il n'y a pas de doublons
  assert:
    that:
      - modules_to_deploy | map(attribute='name') | list == (modules_to_deploy | map(attribute='name') | unique | list)
    fail_msg: "ERREUR : Doublons détectés dans modules_to_deploy"

- name: Afficher les noms des modules à déployer
  debug:
    msg: "{{ modules_to_deploy | map(attribute='name') | list }}"
